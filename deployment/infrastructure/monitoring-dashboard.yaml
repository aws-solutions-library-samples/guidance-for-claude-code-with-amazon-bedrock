AWSTemplateFormatVersion: '2010-09-09'
Description: '( SO9610 )  Comprehensive monitoring dashboard for Claude Code with token usage tracking and productivity analytics'

Parameters:
  DashboardName:
    Type: String
    Default: ClaudeCodeMonitoring
    Description: Name for the CloudWatch dashboard

  MetricNamespace:
    Type: String
    Default: ClaudeCode
    Description: CloudWatch namespace for Claude Code metrics

  BedrockRegion:
    Type: String
    Default: us-east-1
    Description: Primary region where Bedrock is accessed

  AlertEmail:
    Type: String
    Default: ''
    Description: Email address for alerts (optional)

Conditions:
  HasAlertEmail: !Not [!Equals [!Ref AlertEmail, '']]

Resources:
  # SNS Topic for Alerts
  AlertTopic:
    Type: AWS::SNS::Topic
    Condition: HasAlertEmail
    Properties:
      TopicName: !Sub '${DashboardName}-Alerts'
      DisplayName: Claude Code Monitoring Alerts
      Subscription:
        - Endpoint: !Ref AlertEmail
          Protocol: email

  # Comprehensive Monitoring Dashboard
  MonitoringDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Ref DashboardName
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "text",
              "x": 0,
              "y": 0,
              "width": 24,
              "height": 3,
              "properties": {
                "markdown": "# Claude Code Monitoring Dashboard\n**Organization-wide token usage, productivity metrics, and model analytics**\n\nLast Updated: ${AWS::StackName} | Region: ${AWS::Region}",
                "background": "transparent"
              }
            },
            {
              "type": "log",
              "x": 0,
              "y": 3,
              "width": 12,
              "height": 6,
              "properties": {
                "query": "SOURCE '/aws/claude-code/metrics' | filter @message like /claude_code.token.usage/ | parse @message /\"claude_code.token.usage\":(?<tokens>[0-9.]+)/ | stats sum(tokens) as total_tokens by bin(5m)",
                "region": "${AWS::Region}",
                "title": "Total Token Usage (5-min intervals)",
                "queryLanguage": "cwli",
                "setPeriodToTimeRange": true,
                "view": "timeSeries",
                "stacked": false
              }
            },
            {
              "type": "log",
              "x": 12,
              "y": 3,
              "width": 12,
              "height": 6,
              "properties": {
                "query": "SOURCE '/aws/claude-code/metrics' | filter @message like /claude_code.token.usage/ | parse @message /\"model\":\"(?<model>[^\"]*)\"/ | parse @message /\"claude_code.token.usage\":(?<tokens>[0-9.]+)/ | fields bin(5m) as time, if(model like /claude-opus-4-1/, tokens, 0) as opus_4_1_tokens, if(model like /claude-opus-4-0/, tokens, 0) as opus_4_tokens, if(model like /claude-sonnet-4/, tokens, 0) as sonnet_4_tokens, if(model like /claude-3.*7.*sonnet/, tokens, 0) as sonnet_3_7_tokens, if(model like /claude-3.*5.*haiku/, tokens, 0) as haiku_3_5_tokens | stats sum(opus_4_1_tokens) as Opus_4_1, sum(opus_4_tokens) as Opus_4, sum(sonnet_4_tokens) as Sonnet_4, sum(sonnet_3_7_tokens) as Sonnet_3_7, sum(haiku_3_5_tokens) as Haiku_3_5 by time",
                "region": "${AWS::Region}",
                "title": "Token Usage by Model (5-min intervals)",
                "queryLanguage": "cwli",
                "setPeriodToTimeRange": true,
                "view": "timeSeries",
                "stacked": false
              }
            },
            {
              "type": "log",
              "x": 0,
              "y": 9,
              "width": 24,
              "height": 8,
              "properties": {
                "query": "SOURCE '/aws/claude-code/metrics' | filter @message like /claude_code.token.usage/ | parse @message /\"type\":\"(?<type>[^\"]*)\"/ | parse @message /\"claude_code.token.usage\":(?<tokens>[0-9.]+)/ | stats sum(tokens) as total_tokens by type",
                "region": "${AWS::Region}",
                "title": "Token Usage by Type",
                "queryLanguage": "cwli",
                "setPeriodToTimeRange": true,
                "view": "pie"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 17,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "${MetricNamespace}", "claude_code.session.count", "OTelLib", "com.anthropic.claude_code", { "stat": "SampleCount", "period": 3600, "label": "Active Sessions" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Active Sessions per Hour",
                "period": 3600,
                "yAxis": {
                  "left": {
                    "label": "Session Count",
                    "showUnits": false
                  }
                }
              }
            },
            {
              "type": "log",
              "x": 12,
              "y": 17,
              "width": 12,
              "height": 6,
              "properties": {
                "query": "SOURCE '/aws/claude-code/metrics' | filter @message like /claude_code.token.usage/ | parse @message /\"claude_code.token.usage\":(?<tokens>[0-9.]+)/ | stats sum(tokens) as total_tokens",
                "region": "${AWS::Region}",
                "title": "Total Tokens Used",
                "queryLanguage": "cwli",
                "setPeriodToTimeRange": true,
                "view": "singleValue"
              }
            },
            {
              "type": "log",
              "x": 0,
              "y": 23,
              "width": 24,
              "height": 8,
              "properties": {
                "query": "SOURCE '/aws/claude-code/metrics' | filter @message like /claude_code.token.usage/ | parse @message /\"type\":\"(?<type>[^\"]*)\"/ | parse @message /\"claude_code.token.usage\":(?<tokens>[0-9.]+)/ | stats sum(tokens) as value by bin(5m) as time, type",
                "region": "${AWS::Region}",
                "title": "Token Usage by Type Over Time",
                "queryLanguage": "cwli",
                "setPeriodToTimeRange": true,
                "view": "timeSeries",
                "stacked": true
              }
            },
            {
              "type": "log",
              "x": 12,
              "y": 31,
              "width": 12,
              "height": 6,
              "properties": {
                "query": "SOURCE '/aws/claude-code/metrics' | filter @message like /claude_code.token.usage/ and @message like /type/ | parse @message /\"type\":\"(?<type>[^\"]*)\"/ | parse @message /\"claude_code.token.usage\":(?<tokens>[0-9.]+)/ | filter type in ['input', 'output'] | stats sum(tokens) as total_tokens by bin(1h), type",
                "region": "${AWS::Region}",
                "title": "Input vs Output Tokens (Hourly)",
                "queryLanguage": "cwli",
                "setPeriodToTimeRange": true,
                "view": "timeSeries",
                "stacked": true
              }
            },
            {
              "type": "text",
              "x": 0,
              "y": 37,
              "width": 24,
              "height": 6,
              "properties": {
                "markdown": "## User Analytics with Identity Provider Attribution\n\n**User-specific metrics with consistent attribution across identity providers**\n\nTo view detailed user analytics including:\n- Top users by token consumption across identity providers (Okta, Auth0, Cognito)\n- Organization-specific usage tracking\n- Cost allocation by user, organization, and identity provider\n- Model usage preferences by department and team\n\nClick here to access the Athena console: [Open Athena Analytics](https://console.aws.amazon.com/athena/home?region=${AWS::Region})\n\nSample queries are available in the Saved Queries section.",
                "background": "transparent"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 43,
              "width": 24,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Bedrock", "Invocations", "ModelId", "anthropic.claude-3-sonnet-20240229-v1:0", { "stat": "Sum", "period": 3600, "label": "Claude 3 Sonnet" } ],
                  [ "AWS/Bedrock", "Invocations", "ModelId", "anthropic.claude-3-haiku-20240307-v1:0", { "stat": "Sum", "period": 3600, "label": "Claude 3 Haiku" } ],
                  [ "AWS/Bedrock", "Invocations", "ModelId", "anthropic.claude-3-opus-20240229-v1:0", { "stat": "Sum", "period": 3600, "label": "Claude 3 Opus" } ],
                  [ "AWS/Bedrock", "Invocations", { "stat": "Sum", "period": 3600, "label": "Total Invocations" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${BedrockRegion}",
                "title": "Bedrock API Calls",
                "period": 3600,
                "stat": "Sum",
                "yAxis": {
                  "left": {
                    "label": "Invocation Count",
                    "showUnits": false
                  }
                }
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 49,
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  [ "${MetricNamespace}", "claude_code.lines_of_code.count", "type", "added", "OTelLib", "com.anthropic.claude_code", { "stat": "Sum", "label": "Lines Added" } ]
                ],
                "view": "singleValue",
                "region": "${AWS::Region}",
                "title": "Lines of Code Added",
                "setPeriodToTimeRange": true,
                "stat": "Sum"
              }
            },
            {
              "type": "metric",
              "x": 6,
              "y": 49,
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  [ "${MetricNamespace}", "claude_code.commit.count", "OTelLib", "com.anthropic.claude_code", { "stat": "Sum", "label": "Commits" } ]
                ],
                "view": "singleValue",
                "region": "${AWS::Region}",
                "title": "Commits",
                "setPeriodToTimeRange": true,
                "stat": "Sum"
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 49,
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  [ "${MetricNamespace}", "claude_code.code_edit_tool.decision", "decision", "accept", "OTelLib", "com.anthropic.claude_code", { "stat": "Sum", "id": "m1" } ],
                  [ "...", "reject", { "stat": "Sum", "id": "m2" } ],
                  [ { "expression": "m1/(m1+m2)*100", "id": "e1", "label": "Acceptance Rate %" } ]
                ],
                "view": "singleValue",
                "region": "${AWS::Region}",
                "title": "Code Edit Acceptance Rate",
                "setPeriodToTimeRange": true
              }
            },
            {
              "type": "metric",
              "x": 18,
              "y": 49,
              "width": 6,
              "height": 4,
              "properties": {
                "metrics": [
                  [ "${MetricNamespace}", "claude_code.active_time.total", { "stat": "Sum", "id": "m1", "label": "Active Time (seconds)" } ],
                  [ { "expression": "m1/3600", "id": "e1", "label": "Active Hours" } ]
                ],
                "view": "singleValue",
                "region": "${AWS::Region}",
                "title": "Active Development Time",
                "setPeriodToTimeRange": true
              }
            },
            {
              "type": "log",
              "x": 0,
              "y": 53,
              "width": 12,
              "height": 6,
              "properties": {
                "query": "SOURCE '/aws/claude-code/metrics' | filter @message like /type/ and (@message like /cacheRead/ or @message like /cacheCreation/) | parse @message /\"type\":\"(?<cache_type>[^\"]*)\"/ | parse @message /\"claude_code.token.usage\":(?<tokens>[0-9.]+)/ | stats sum(tokens) by bin(1m) as time, cache_type",
                "region": "${AWS::Region}",
                "title": "Cache Efficiency Over Time",
                "queryLanguage": "cwli",
                "setPeriodToTimeRange": true,
                "view": "timeSeries",
                "stacked": false
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 53,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "${MetricNamespace}", "claude_code.code_edit_tool.decision", "tool_name", "Edit", "OTelLib", "com.anthropic.claude_code", { "stat": "Sum", "period": 3600, "label": "Edit" } ],
                  [ "...", "MultiEdit", { "stat": "Sum", "period": 3600, "label": "MultiEdit" } ],
                  [ "...", "Write", { "stat": "Sum", "period": 3600, "label": "Write" } ]
                ],
                "view": "timeSeries",
                "stacked": true,
                "region": "${AWS::Region}",
                "title": "Tool Usage Frequency (Hourly)",
                "period": 3600,
                "yAxis": {
                  "left": {
                    "label": "Count",
                    "showUnits": false
                  }
                }
              }
            },
            {
              "type": "log",
              "x": 0,
              "y": 59,
              "width": 24,
              "height": 6,
              "properties": {
                "query": "SOURCE '/aws/claude-code/metrics' | filter @message like /code_edit_tool.decision/ and @message like /language/ | parse @message /\"language\":\"(?<lang>[^\"]*)\"/ | parse @message /\"claude_code.code_edit_tool.decision\":(?<count>[0-9.]+)/ | stats sum(count) as total by lang | sort total desc",
                "region": "${AWS::Region}",
                "title": "Code Generation by Programming Language",
                "queryLanguage": "cwli",
                "setPeriodToTimeRange": true,
                "view": "bar"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 65,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Bedrock", "InvocationLatency", "ModelId", "us.anthropic.claude-opus-4-1-20250805-v1:0", { "stat": "Average", "period": 3600, "label": "Opus 4.1" } ],
                  [ "AWS/Bedrock", "InvocationLatency", "ModelId", "us.anthropic.claude-sonnet-4-20250514-v1:0", { "stat": "Average", "period": 3600, "label": "Sonnet 4" } ],
                  [ "AWS/Bedrock", "InvocationLatency", "ModelId", "us.anthropic.claude-3-7-sonnet-20250219-v1:0", { "stat": "Average", "period": 3600, "label": "Claude 3.7" } ],
                  [ "AWS/Bedrock", "InvocationLatency", "ModelId", "us.anthropic.claude-3-5-haiku-20241022-v1:0", { "stat": "Average", "period": 3600, "label": "Haiku 3.5" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${BedrockRegion}",
                "title": "Model Response Latency (ms)",
                "period": 3600,
                "yAxis": {
                  "left": {
                    "label": "Latency (ms)",
                    "showUnits": false
                  }
                }
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 65,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Bedrock", "InvocationClientErrors", { "stat": "Sum", "period": 3600, "id": "m2", "label": "Client Errors", "color": "#d62728" } ],
                  [ ".", "InvocationServerErrors", { "stat": "Sum", "period": 3600, "id": "m3", "label": "Server Errors", "color": "#ff7f0e" } ],
                  [ ".", "InvocationThrottles", { "stat": "Sum", "period": 3600, "id": "m4", "label": "Throttles", "color": "#ffbb78" } ],
                  [ ".", "Invocations", { "stat": "Sum", "period": 3600, "id": "m1", "visible": false } ],
                  [ { "expression": "(m2+m3+m4)/m1*100", "id": "e1", "label": "Error Rate %", "yAxis": "right" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${BedrockRegion}",
                "title": "API Errors and Throttles",
                "period": 3600,
                "yAxis": {
                  "left": {
                    "label": "Error Count",
                    "showUnits": false
                  },
                  "right": {
                    "label": "Error Rate %",
                    "showUnits": false
                  }
                }
              }
            },
            {
              "type": "log",
              "x": 0,
              "y": 71,
              "width": 12,
              "height": 6,
              "properties": {
                "query": "SOURCE '/aws/claude-code/metrics' | filter @message like /claude_code.token.usage/ | parse @message /\"user.email\":\"(?<user>[^\"]*)\"/ | parse @message /\"claude_code.token.usage\":(?<tokens>[0-9.]+)/ | stats sum(tokens) as total_tokens by user | sort total_tokens desc | limit 10",
                "region": "${AWS::Region}",
                "title": "Top 10 Users by Token Usage",
                "queryLanguage": "cwli",
                "setPeriodToTimeRange": true,
                "view": "bar"
              }
            }
          ]
        }

  # CloudWatch Alarms
  HighTokenUsageAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${DashboardName}-HighTokenUsage'
      AlarmDescription: 'Alert when total token usage exceeds threshold'
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      Threshold: 10000000  # 10M tokens per hour
      TreatMissingData: notBreaching
      MetricName: claude_code.token.usage
      Namespace: !Ref MetricNamespace
      Statistic: Sum
      Period: 3600
      AlarmActions:
        - !If [HasAlertEmail, !Ref AlertTopic, !Ref 'AWS::NoValue']

  DailyTokenThresholdAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${DashboardName}-DailyTokenThreshold'
      AlarmDescription: 'Alert when daily token usage exceeds 100M tokens'
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      Threshold: 100000000  # 100M tokens per day
      TreatMissingData: notBreaching
      MetricName: claude_code.token.usage
      Namespace: !Ref MetricNamespace
      Statistic: Sum
      Period: 86400
      AlarmActions:
        - !If [HasAlertEmail, !Ref AlertTopic, !Ref 'AWS::NoValue']

  # Note: API error metrics are not available in Claude Code telemetry
  # Commenting out this alarm until such metrics are implemented
  # HighErrorRateAlarm:
  #   Type: AWS::CloudWatch::Alarm
  #   Properties:
  #     AlarmName: !Sub '${DashboardName}-HighErrorRate'
  #     AlarmDescription: 'Alert when API error rate is high'
  #     MetricName: claude_code.api.errors
  #     Namespace: !Ref MetricNamespace
  #     Statistic: Sum
  #     Period: 300
  #     EvaluationPeriods: 2
  #     Threshold: 50
  #     ComparisonOperator: GreaterThanThreshold
  #     TreatMissingData: notBreaching
  #     AlarmActions:
  #       - !If [HasAlertEmail, !Ref AlertTopic, !Ref 'AWS::NoValue']

  # Bedrock-specific Alarms
  HighBedrockUsageAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${DashboardName}-HighBedrockUsage'
      AlarmDescription: 'Alert when Bedrock API calls spike unexpectedly'
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 2
      Threshold: 1000  # 1000 API calls per hour
      TreatMissingData: notBreaching
      MetricName: Invocations
      Namespace: AWS/Bedrock
      Statistic: Sum
      Period: 3600
      AlarmActions:
        - !If [HasAlertEmail, !Ref AlertTopic, !Ref 'AWS::NoValue']

  LowCacheEfficiencyAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${DashboardName}-LowCacheEfficiency'
      AlarmDescription: 'Alert when cache hit rate drops below 30%'
      ComparisonOperator: LessThanThreshold
      EvaluationPeriods: 2
      Threshold: 30  # 30% cache hit rate
      TreatMissingData: notBreaching
      Metrics:
        - Id: m1
          MetricStat:
            Metric:
              MetricName: claude_code.token.usage
              Namespace: !Ref MetricNamespace
              Dimensions:
                - Name: type
                  Value: cacheRead
            Period: 3600
            Stat: Sum
          ReturnData: false
        - Id: m2
          MetricStat:
            Metric:
              MetricName: claude_code.token.usage
              Namespace: !Ref MetricNamespace
              Dimensions:
                - Name: type
                  Value: cacheCreation
            Period: 3600
            Stat: Sum
          ReturnData: false
        - Id: e1
          Expression: "(m1/(m1+m2))*100"
          ReturnData: true
      AlarmActions:
        - !If [HasAlertEmail, !Ref AlertTopic, !Ref 'AWS::NoValue']

  HighAPIErrorRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${DashboardName}-HighAPIErrorRate'
      AlarmDescription: 'Alert when Bedrock API error rate exceeds 5%'
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 2
      Threshold: 5  # 5% error rate
      TreatMissingData: notBreaching
      Metrics:
        - Id: m1
          MetricStat:
            Metric:
              MetricName: InvocationClientErrors
              Namespace: AWS/Bedrock
            Period: 300
            Stat: Sum
          ReturnData: false
        - Id: m2
          MetricStat:
            Metric:
              MetricName: InvocationServerErrors
              Namespace: AWS/Bedrock
            Period: 300
            Stat: Sum
          ReturnData: false
        - Id: m3
          MetricStat:
            Metric:
              MetricName: InvocationThrottles
              Namespace: AWS/Bedrock
            Period: 300
            Stat: Sum
          ReturnData: false
        - Id: m4
          MetricStat:
            Metric:
              MetricName: Invocations
              Namespace: AWS/Bedrock
            Period: 300
            Stat: Sum
          ReturnData: false
        - Id: e1
          Expression: "((m1+m2+m3)/m4)*100"
          ReturnData: true
      AlarmActions:
        - !If [HasAlertEmail, !Ref AlertTopic, !Ref 'AWS::NoValue']

  # CloudWatch Logs Insights Queries (saved as SSM Parameters)
  TopUsersQuery:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/cloudwatch/insights/${DashboardName}/top-users'
      Type: String
      Value: |
        fields @timestamp, user.id, user.email, organization.id, claude_code.token.usage
        | filter @type = "metric" and MetricName = "claude_code.token.usage"
        | stats sum(claude_code.token.usage) as total_tokens by user.id, user.email, organization.id
        | sort total_tokens desc
        | limit 20
      Description: 'Query to find top users by token consumption with identity attribution'

  UserActivityQuery:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/cloudwatch/insights/${DashboardName}/user-activity'
      Type: String
      Value: |
        fields @timestamp, user.id, user.email, organization.id, session.id, claude_code.token.usage, model
        | filter @type = "metric" and user.id = "USER_ID_HERE"
        | sort @timestamp desc
        | limit 100
      Description: 'Query to track specific user activity'

  TokensByModelQuery:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/cloudwatch/insights/${DashboardName}/tokens-by-model'
      Type: String
      Value: |
        fields model, claude_code.token.usage, organization.id
        | filter @type = "metric" and MetricName = "claude_code.token.usage"
        | stats sum(claude_code.token.usage) as tokens by model, organization.id
        | sort tokens desc
      Description: 'Query to analyze token usage by model type and organization'

  OrganizationUsageQuery:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/cloudwatch/insights/${DashboardName}/organization-usage'
      Type: String
      Value: |
        fields @timestamp, organization.id, claude_code.token.usage
        | filter @type = "metric" and MetricName = "claude_code.token.usage"
        | stats sum(claude_code.token.usage) as total_tokens by organization.id
        | sort total_tokens desc
      Description: 'Query to analyze token usage by organization'

  EmailDomainUsageQuery:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/cloudwatch/insights/${DashboardName}/email-domain-usage'
      Type: String
      Value: |
        fields @timestamp, user.email, claude_code.token.usage
        | filter @type = "metric" and MetricName = "claude_code.token.usage" and isPresent(user.email)
        | parse user.email "*@*" as username, domain
        | stats sum(claude_code.token.usage) as total_tokens by domain
        | sort total_tokens desc
      Description: 'Query to analyze token usage by email domain'

  # Log Groups for Claude Code telemetry (metrics log group created by OTEL collector stack)
  TelemetryLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/claude-code/telemetry
      RetentionInDays: 7
      Tags:
        - Key: Purpose
          Value: Claude Code OTEL Telemetry
        - Key: Stack
          Value: !Ref AWS::StackName

  # Note: /aws/claude-code/metrics log group is created by the OTEL collector stack

Outputs:
  DashboardURL:
    Description: Direct URL to the CloudWatch dashboard
    Value: !Sub 'https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${DashboardName}'

  MetricsExplorerURL:
    Description: URL to explore all Claude Code metrics
    Value: !Sub 'https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#metricsV2:graph=~();query=${MetricNamespace}'

  LogsInsightsURL:
    Description: URL to CloudWatch Logs Insights for custom queries
    Value: !Sub 'https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#logsV2:logs-insights'

  AlertTopicArn:
    Description: SNS Topic ARN for alerts
    Value: !If [HasAlertEmail, !Ref AlertTopic, 'Not configured - provide AlertEmail parameter']

  SavedQueriesPrefix:
    Description: SSM Parameter Store prefix for saved queries
    Value: !Sub '/cloudwatch/insights/${DashboardName}/'

  MetricsLogGroupName:
    Description: CloudWatch Log Group for Claude Code metrics (use with Logs Insights)
    Value: /aws/claude-code/metrics

  TelemetryLogGroupName:
    Description: CloudWatch Log Group for Claude Code telemetry (use with Logs Insights)
    Value: !Ref TelemetryLogGroup
