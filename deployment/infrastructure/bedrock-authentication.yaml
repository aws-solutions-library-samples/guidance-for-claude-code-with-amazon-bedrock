AWSTemplateFormatVersion: '2010-09-09'
Description: '( SO9610 ) Unified authentication for Amazon Bedrock - supports both Cognito Identity Pool and Direct STS federation'

Parameters:
  # Federation Configuration
  FederationType:
    Type: String
    Default: cognito # Default to Cognito for backward compatibility
    AllowedValues:
      - cognito # Cognito Identity Pool only
      - direct # Direct STS only
    Description: Federation type - Cognito Identity Pool or Direct STS

  AuthProviderType:
    Type: String
    Default: ExternalOIDC
    AllowedValues:
      - ExternalOIDC
      - CognitoUserPool
    Description: Choose between external OIDC provider (Okta, Auth0, etc.) or AWS Cognito User Pool

  # External OIDC Parameters (used when AuthProviderType = ExternalOIDC)
  OIDCProviderType:
    Type: String
    Default: okta
    AllowedValues:
      - okta
      - auth0
      - azure
    Description: Specific OIDC provider type - Required for ExternalOIDC

  OIDCProviderDomain:
    Type: String
    Default: ''
    Description: Your OIDC provider domain (e.g., company.okta.com) - Required for ExternalOIDC
    AllowedPattern: '^$|^[a-zA-Z0-9][a-zA-Z0-9.-]+\.[a-zA-Z0-9]+(/[a-zA-Z0-9._/:?#@!$&()*+,;=-]*)?$'

  OIDCClientId:
    Type: String
    Default: ''
    Description: OIDC application client ID - Required for ExternalOIDC
    NoEcho: true

  # Cognito User Pool Parameters (used when AuthProviderType = CognitoUserPool)
  CognitoUserPoolId:
    Type: String
    Default: ''
    Description: Cognito User Pool ID (e.g., us-east-1_ABC123def) - Required for CognitoUserPool
    AllowedPattern: '^$|^[\w-]+_[0-9a-zA-Z]+$'

  CognitoUserPoolClientId:
    Type: String
    Default: ''
    Description: Cognito User Pool App Client ID - Required for CognitoUserPool
    NoEcho: true

  # Common Parameters
  IdentityPoolName:
    Type: String
    Default: bedrock-shared-access
    Description: Name for the Cognito Identity Pool (when using Cognito federation)

  FederatedRoleName:
    Type: String
    Default: BedrockAccessRole
    Description: Base name for IAM roles (will be suffixed with provider type for Direct STS)

  MaxSessionDuration:
    Type: Number
    Default: 28800 # 8 hours for Cognito, can be overridden to 43200 for Direct STS
    MinValue: 3600
    MaxValue: 43200
    Description: Maximum session duration in seconds (8 hours for Cognito, up to 12 hours for Direct STS)

  AllowedBedrockRegions:
    Type: CommaDelimitedList
    Default: 'us-east-1,us-east-2,us-west-1,us-west-2,eu-west-1,eu-west-3,eu-central-1,eu-north-1,eu-south-1,eu-south-2,ap-northeast-1,ap-southeast-1,ap-southeast-2,ap-southeast-3,ap-south-1'
    Description: AWS regions allowed for Bedrock access (configured based on selected model and cross-region profile)

  EnableMonitoring:
    Type: String
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Enable OpenTelemetry monitoring permissions for Claude Code

  EnableBedrockTracking:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Enable CloudTrail tracking of Bedrock API calls for monitoring and cost analysis

  EnableSessionTags:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Enable session tags for CloudTrail attribution (Direct STS only)

Conditions:
  UseExternalOIDC: !Equals [!Ref AuthProviderType, 'ExternalOIDC']
  UseCognitoUserPool: !Equals [!Ref AuthProviderType, 'CognitoUserPool']

  # Federation mode conditions
  UseDirectSTS: !Equals [!Ref FederationType, 'direct']
  UseCognitoIdentity: !Equals [!Ref FederationType, 'cognito']

  # Provider-specific conditions for Direct STS
  IsOkta: !Equals [!Ref OIDCProviderType, 'okta']
  IsAuth0: !Equals [!Ref OIDCProviderType, 'auth0']
  IsAzure: !Equals [!Ref OIDCProviderType, 'azure']

  # Combined conditions
  CreateOIDCProvider: !And
    - !Condition UseExternalOIDC
    - !Condition UseDirectSTS
  CreateOktaRole: !And
    - !Condition CreateOIDCProvider
    - !Condition IsOkta
  CreateAuth0Role: !And
    - !Condition CreateOIDCProvider
    - !Condition IsAuth0
  CreateAzureRole: !And
    - !Condition CreateOIDCProvider
    - !Condition IsAzure
  CreateCognitoProvider: !And
    - !Condition UseCognitoUserPool
    - !Condition UseDirectSTS
  CreateIdentityPool: !Condition UseCognitoIdentity

  # Feature conditions
  MonitoringEnabled: !Equals [!Ref EnableMonitoring, 'true']
  BedrockTrackingEnabled: !Equals [!Ref EnableBedrockTracking, 'true']
  SessionTagsEnabled: !And
    - !Equals [!Ref EnableSessionTags, 'true']
    - !Condition UseDirectSTS

Resources:
  # ===============================================
  # Cognito Identity Pool Resources
  # ===============================================

  BedrockIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Condition: CreateIdentityPool
    Properties:
      IdentityPoolName: !Ref IdentityPoolName
      AllowUnauthenticatedIdentities: true
      AllowClassicFlow: false
      # For External OIDC providers
      OpenIdConnectProviderARNs: !If
        - UseExternalOIDC
        - - !If
            - CreateOIDCProvider
            - !GetAtt OIDCProvider.Arn
            - !Sub 'arn:aws:iam::${AWS::AccountId}:oidc-provider/${OIDCProviderDomain}'
        - !Ref 'AWS::NoValue'
      # For Cognito User Pool
      CognitoIdentityProviders: !If
        - UseCognitoUserPool
        - - ClientId: !Ref CognitoUserPoolClientId
            ProviderName: !Sub 'cognito-idp.${AWS::Region}.amazonaws.com/${CognitoUserPoolId}'
            ServerSideTokenCheck: true
        - !Ref 'AWS::NoValue'

  # ===============================================
  # IAM OIDC Providers (Direct STS Mode)
  # ===============================================

  OIDCProvider:
    Type: AWS::IAM::OIDCProvider
    Condition: CreateOIDCProvider
    Properties:
      Url: !Sub 'https://${OIDCProviderDomain}'
      ClientIdList:
        - !Ref OIDCClientId
      ThumbprintList:
        - '0000000000000000000000000000000000000000'
      Tags:
        - Key: Purpose
          Value: Claude Code Authentication
        - Key: Provider
          Value: !Ref OIDCProviderType
        - Key: FederationType
          Value: !Ref FederationType

  CognitoUserPoolOIDCProvider:
    Type: AWS::IAM::OIDCProvider
    Condition: CreateCognitoProvider
    Properties:
      Url: !Sub 'https://cognito-idp.${AWS::Region}.amazonaws.com/${CognitoUserPoolId}'
      ClientIdList:
        - !Ref CognitoUserPoolClientId
      ThumbprintList:
        - '0000000000000000000000000000000000000000'
      Tags:
        - Key: Purpose
          Value: Claude Code Authentication
        - Key: Provider
          Value: cognito
        - Key: FederationType
          Value: !Ref FederationType

  # ===============================================
  # Shared IAM Policy for Bedrock Access
  # ===============================================

  BedrockAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Policy for authenticated users to access Bedrock
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowBedrockInvokeRegional
            Effect: Allow
            Action:
              - 'bedrock:InvokeModel'
              - 'bedrock:InvokeModelWithResponseStream'
            Resource:
              - 'arn:aws:bedrock:*::foundation-model/*'
              - 'arn:aws:bedrock:*:*:inference-profile/*'
            Condition:
              StringEquals:
                'aws:RequestedRegion': !Ref AllowedBedrockRegions
          - Sid: AllowBedrockInvokeGlobal
            Effect: Allow
            Action:
              - 'bedrock:InvokeModel'
              - 'bedrock:InvokeModelWithResponseStream'
            Resource:
              - 'arn:aws:bedrock:::foundation-model/*'
          - Sid: AllowBedrockList
            Effect: Allow
            Action:
              - 'bedrock:ListFoundationModels'
              - 'bedrock:GetFoundationModel'
              - 'bedrock:GetFoundationModelAvailability'
              - 'bedrock:ListInferenceProfiles'
              - 'bedrock:GetInferenceProfile'
            Resource: '*'
            Condition:
              StringEquals:
                'aws:RequestedRegion': !Ref AllowedBedrockRegions
          - !If
            - MonitoringEnabled
            - Sid: AllowCloudWatchOTLP
              Effect: Allow
              Action:
                - 'cloudwatch:PutMetricData'
              Resource: '*'
              Condition:
                StringEquals:
                  'cloudwatch:namespace':
                    - 'ClaudeCode'
                    - 'AWS/Bedrock'
                  'aws:RequestedRegion': !Ref AllowedBedrockRegions
            - !Ref 'AWS::NoValue'

  # ===============================================
  # IAM Roles for Cognito Identity Pool
  # ===============================================

  CognitoAuthenticatedRole:
    Type: AWS::IAM::Role
    Condition: CreateIdentityPool
    Properties:
      Description: Role for Cognito authenticated users to access Bedrock
      MaxSessionDuration: !Ref MaxSessionDuration
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
              - 'sts:TagSession'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Ref BedrockIdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': authenticated
      ManagedPolicyArns:
        - !Ref BedrockAccessPolicy
      Tags:
        - Key: Purpose
          Value: Claude Code Cognito Authentication
        - Key: FederationType
          Value: cognito

  CognitoUnauthenticatedRole:
    Type: AWS::IAM::Role
    Condition: CreateIdentityPool
    Properties:
      Description: Minimal role for unauthenticated Cognito Identity Pool users
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Ref BedrockIdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': unauthenticated
      Policies:
        - PolicyName: CognitoIdentityAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'cognito-identity:GetId'
                  - 'cognito-identity:GetCredentialsForIdentity'
                Resource: '*'

  IdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Condition: CreateIdentityPool
    Properties:
      IdentityPoolId: !Ref BedrockIdentityPool
      Roles:
        authenticated: !GetAtt CognitoAuthenticatedRole.Arn
        unauthenticated: !GetAtt CognitoUnauthenticatedRole.Arn

  IdentityPoolPrincipalTag:
    Type: AWS::Cognito::IdentityPoolPrincipalTag
    Condition: CreateIdentityPool
    DeletionPolicy: Delete
    Properties:
      IdentityPoolId: !Ref BedrockIdentityPool
      IdentityProviderName: !If
        - UseExternalOIDC
        - !Ref OIDCProviderDomain
        - !Sub 'cognito-idp.${AWS::Region}.amazonaws.com/${CognitoUserPoolId}'
      UseDefaults: false
      PrincipalTags:
        UserEmail: email
        UserId: sub
        UserName: !If
          - UseCognitoUserPool
          - preferred_username
          - name

  # ===============================================
  # IAM Roles for Direct STS Federation
  # ===============================================

  # Okta Direct STS Role
  DirectSTSRoleOkta:
    Type: AWS::IAM::Role
    Condition: CreateOktaRole
    Properties:
      RoleName: !Sub '${FederatedRoleName}-okta-direct'
      Description: Direct STS federated role for Okta users accessing Bedrock
      MaxSessionDuration: 43200 # 12 hours for Direct STS
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: !GetAtt OIDCProvider.Arn
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
              - !If
                - SessionTagsEnabled
                - 'sts:TagSession'
                - !Ref 'AWS::NoValue'
      ManagedPolicyArns:
        - !Ref BedrockAccessPolicy
      Tags:
        - Key: Purpose
          Value: Claude Code Direct STS Authentication
        - Key: Provider
          Value: okta
        - Key: FederationType
          Value: direct

  # Auth0 Direct STS Role
  DirectSTSRoleAuth0:
    Type: AWS::IAM::Role
    Condition: CreateAuth0Role
    Properties:
      RoleName: !Sub '${FederatedRoleName}-auth0-direct'
      Description: Direct STS federated role for Auth0 users accessing Bedrock
      MaxSessionDuration: 43200 # 12 hours for Direct STS
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: !GetAtt OIDCProvider.Arn
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
              - !If
                - SessionTagsEnabled
                - 'sts:TagSession'
                - !Ref 'AWS::NoValue'
      ManagedPolicyArns:
        - !Ref BedrockAccessPolicy
      Tags:
        - Key: Purpose
          Value: Claude Code Direct STS Authentication
        - Key: Provider
          Value: auth0
        - Key: FederationType
          Value: direct

  # Azure AD Direct STS Role
  DirectSTSRoleAzure:
    Type: AWS::IAM::Role
    Condition: CreateAzureRole
    Properties:
      RoleName: !Sub '${FederatedRoleName}-azure-direct'
      Description: Direct STS federated role for Azure AD users accessing Bedrock
      MaxSessionDuration: 43200 # 12 hours for Direct STS
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: !GetAtt OIDCProvider.Arn
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
              - !If
                - SessionTagsEnabled
                - 'sts:TagSession'
                - !Ref 'AWS::NoValue'
      ManagedPolicyArns:
        - !Ref BedrockAccessPolicy
      Tags:
        - Key: Purpose
          Value: Claude Code Direct STS Authentication
        - Key: Provider
          Value: azure
        - Key: FederationType
          Value: direct

  DirectSTSRoleCognito:
    Type: AWS::IAM::Role
    Condition: CreateCognitoProvider
    Properties:
      RoleName: !Sub '${FederatedRoleName}-cognito-direct'
      Description: Direct STS federated role for Cognito User Pool users
      MaxSessionDuration: !If
        - UseDirectSTS
        - 43200 # 12 hours for Direct STS
        - !Ref MaxSessionDuration
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: !GetAtt CognitoUserPoolOIDCProvider.Arn
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
              - !If
                - SessionTagsEnabled
                - 'sts:TagSession'
                - !Ref 'AWS::NoValue'
      ManagedPolicyArns:
        - !Ref BedrockAccessPolicy
      Tags:
        - Key: Purpose
          Value: Claude Code Direct STS Authentication
        - Key: Provider
          Value: cognito
        - Key: FederationType
          Value: direct

  # ===============================================
  # CloudWatch and CloudTrail Monitoring
  # ===============================================

  BedrockAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Condition: BedrockTrackingEnabled
    Properties:
      LogGroupName: !Sub '/aws/bedrock/${FederationType}-access'
      RetentionInDays: 30
      Tags:
        - Key: Purpose
          Value: Claude Code Bedrock Access Tracking
        - Key: FederationType
          Value: !Ref FederationType

  CloudTrailBucket:
    Type: AWS::S3::Bucket
    Condition: BedrockTrackingEnabled
    DeletionPolicy: Retain
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldLogs
            Status: Enabled
            ExpirationInDays: 90
      Tags:
        - Key: Purpose
          Value: Claude Code CloudTrail Storage
        - Key: Name
          Value: !Sub '${AWS::StackName}-cloudtrail-bucket'

  CloudTrailBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: BedrockTrackingEnabled
    Properties:
      Bucket: !Ref CloudTrailBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AWSCloudTrailAclCheck
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: s3:GetBucketAcl
            Resource: !GetAtt CloudTrailBucket.Arn
            Condition:
              StringEquals:
                'AWS:SourceArn': !Sub 'arn:aws:cloudtrail:${AWS::Region}:${AWS::AccountId}:trail/claude-code-bedrock-trail'
          - Sid: AWSCloudTrailWrite
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: s3:PutObject
            Resource: !Sub '${CloudTrailBucket.Arn}/*'
            Condition:
              StringEquals:
                's3:x-amz-acl': bucket-owner-full-control
                'AWS:SourceArn': !Sub 'arn:aws:cloudtrail:${AWS::Region}:${AWS::AccountId}:trail/claude-code-bedrock-trail'

  CloudTrailLogRole:
    Type: AWS::IAM::Role
    Condition: BedrockTrackingEnabled
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudTrailLogPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !GetAtt BedrockAccessLogGroup.Arn
                  - !Sub '${BedrockAccessLogGroup.Arn}:*'

  BedrockCloudTrail:
    Type: AWS::CloudTrail::Trail
    Condition: BedrockTrackingEnabled
    DependsOn: CloudTrailBucketPolicy
    Properties:
      TrailName: claude-code-bedrock-trail
      S3BucketName: !Ref CloudTrailBucket
      CloudWatchLogsLogGroupArn: !GetAtt BedrockAccessLogGroup.Arn
      CloudWatchLogsRoleArn: !GetAtt CloudTrailLogRole.Arn
      EnableLogFileValidation: true
      EventSelectors:
        - ReadWriteType: All
          IncludeManagementEvents: true
          ExcludeManagementEventSources:
            - kms.amazonaws.com
            - rdsdata.amazonaws.com
      InsightSelectors:
        - InsightType: ApiCallRateInsight
      IsLogging: true
      IsMultiRegionTrail: false
      Tags:
        - Key: Purpose
          Value: Claude Code Bedrock Monitoring

Outputs:
  # Common Outputs
  FederationType:
    Description: Current federation type configuration
    Value: !Ref FederationType
    Export:
      Name: !Sub '${AWS::StackName}-FederationType'

  Region:
    Description: AWS Region for the deployment
    Value: !Ref 'AWS::Region'

  # Cognito Identity Pool Outputs (for backward compatibility)
  IdentityPoolId:
    Description: Cognito Identity Pool ID
    Condition: CreateIdentityPool
    Value: !Ref BedrockIdentityPool
    Export:
      Name: !Sub '${AWS::StackName}-IdentityPoolId'

  BedrockRoleArn:
    Description: IAM Role ARN for Bedrock access (Cognito mode)
    Condition: CreateIdentityPool
    Value: !GetAtt CognitoAuthenticatedRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-BedrockRoleArn'

  # Direct STS Outputs
  DirectSTSRoleArn:
    Description: Direct STS federated role ARN
    Value: !If
      - CreateOktaRole
      - !GetAtt DirectSTSRoleOkta.Arn
      - !If
        - CreateAuth0Role
        - !GetAtt DirectSTSRoleAuth0.Arn
          - !If
          - CreateAzureRole
          - !GetAtt DirectSTSRoleAzure.Arn
          - !If
          - CreateCognitoProvider
          - !GetAtt DirectSTSRoleCognito.Arn
          - 'N/A - Direct STS not enabled'
    Export:
      Name: !Sub '${AWS::StackName}-DirectSTSRoleArn'

  OIDCProviderArn:
    Description: OIDC Provider ARN
    Condition: CreateOIDCProvider
    Value: !GetAtt OIDCProvider.Arn
    Export:
      Name: !Sub '${AWS::StackName}-OIDCProviderArn'

  # Configuration JSON Outputs
  ConfigurationJson:
    Description: Configuration JSON for CLI tool
    Value: !Sub |
      {
        "federation_type": "${FederationType}",
        "provider_domain": "${OIDCProviderDomain}",
        "client_id": "${OIDCClientId}",
        "federated_role_arn": "${DirectSTSRoleArn}",
        "identity_pool_id": "${IdentityPoolId}",
        "aws_region": "${AWS::Region}",
        "provider_type": "${OIDCProviderType}",
        "max_session_duration": 43200
      }

  # Monitoring Outputs
  BedrockLogGroupName:
    Description: CloudWatch Log Group for Bedrock access tracking
    Condition: BedrockTrackingEnabled
    Value: !Ref BedrockAccessLogGroup
    Export:
      Name: !Sub '${AWS::StackName}-BedrockLogGroup'

  CloudTrailName:
    Description: CloudTrail name for Bedrock monitoring
    Condition: BedrockTrackingEnabled
    Value: !Ref BedrockCloudTrail
    Export:
      Name: !Sub '${AWS::StackName}-CloudTrailName'

  CloudTrailBucketName:
    Description: S3 bucket for CloudTrail logs
    Condition: BedrockTrackingEnabled
    Value: !Ref CloudTrailBucket
    Export:
      Name: !Sub '${AWS::StackName}-CloudTrailBucket'

  ConfigurationInstructions:
    Description: Instructions for configuring authentication
    Value: |
      Configure your application based on federation type:
      - For Direct STS: Use federated_role_arn from DirectSTSRoleArn output
      - For Cognito: Use identity_pool_id from IdentityPoolId output
