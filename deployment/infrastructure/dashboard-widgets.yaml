AWSTemplateFormatVersion: '2010-09-09'
Description: 'Custom widget Lambda functions for Claude Code enhanced dashboard visualizations'

Parameters:
  MetricsLogGroup:
    Type: String
    Default: /aws/claude-code/metrics
    Description: CloudWatch Log Group containing Claude Code metrics

  MetricsRegion:
    Type: String
    Default: us-east-1
    Description: Region where metrics log group exists

Resources:
  CustomWidgetRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ClaudeCodeDashboardWidgetRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CloudWatchLogsQuery
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:StartQuery
                  - logs:GetQueryResults
                  - logs:StopQuery
                  - logs:DescribeLogGroups
                Resource: '*'

  TotalTokensWidget:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ClaudeCode-Widget-TotalTokens
      Runtime: python3.11
      Handler: index.lambda_handler
      Role: !GetAtt CustomWidgetRole.Arn
      Timeout: 60
      Environment:
        Variables:
          METRICS_LOG_GROUP: !Ref MetricsLogGroup
          METRICS_REGION: !Ref MetricsRegion
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          from datetime import datetime, timedelta
          import time

          def format_number(num):
              if num >= 1_000_000_000:
                  return f"{num / 1_000_000_000:.1f}B"
              elif num >= 1_000_000:
                  return f"{num / 1_000_000:.1f}M"
              elif num >= 10_000:
                  return f"{num / 1_000:.0f}K"
              else:
                  return f"{num:,.0f}"

          def lambda_handler(event, context):
              if event.get('describe', False):
                  return {"markdown": "# Total Tokens Used\nDisplays formatted total token usage"}
              log_group = os.environ['METRICS_LOG_GROUP']
              region = os.environ['METRICS_REGION']

              widget_context = event.get('widgetContext', {})
              time_range = widget_context.get('timeRange', {})
              widget_size = widget_context.get('size', {})
              width = widget_size.get('width', 300)
              height = widget_size.get('height', 200)

              logs_client = boto3.client('logs', region_name=region)

              try:
                  if 'start' in time_range and 'end' in time_range:
                      start_time = time_range['start']
                      end_time = time_range['end']
                  else:
                      end_time = int(datetime.now().timestamp() * 1000)
                      start_time = int((datetime.now() - timedelta(days=7)).timestamp() * 1000)

                  query = """
                  fields @message
                  | filter @message like /claude_code.token.usage/
                  | parse @message /"claude_code.token.usage":(?<tokens>[0-9.]+)/
                  | stats sum(tokens) as total_tokens
                  """

                  response = logs_client.start_query(
                      logGroupName=log_group,
                      startTime=start_time,
                      endTime=end_time,
                      queryString=query
                  )

                  query_id = response['queryId']

                  max_wait = 55
                  wait_interval = 0.5
                  elapsed = 0
                  check_count = 0

                  while elapsed < max_wait:
                      response = logs_client.get_query_results(queryId=query_id)
                      status = response.get('status', 'Unknown')
                      check_count += 1
                      if status == 'Scheduled':
                          wait_interval = min(wait_interval * 1.5, 3.0)
                      elif status == 'Running':
                          wait_interval = min(wait_interval * 1.1, 1.0)
                      elif status in ['Complete', 'Failed', 'Cancelled']:
                          break

                      time.sleep(wait_interval)
                      elapsed += wait_interval

                  total_tokens = None
                  query_status = response.get('status', 'Unknown')

                  if query_status == 'Complete':
                      if response.get('results') and len(response['results']) > 0:
                          for field in response['results'][0]:
                              if field['field'] == 'total_tokens':
                                  total_tokens = float(field['value'])
                                  break
                      else:
                          total_tokens = 0
                  elif query_status == 'Failed':
                      raise Exception(f"Query failed: {response.get('statusReason', 'Unknown reason')}")
                  elif query_status == 'Cancelled':
                      raise Exception("Query was cancelled")
                  else:
                      raise Exception(f"Query did not complete: {query_status}")

                  if total_tokens is None:
                      formatted_tokens = "N/A"
                  else:
                      formatted_tokens = format_number(total_tokens)

                  font_size = min(width // 10, height // 5, 48)

                  if total_tokens == 0:
                      bg_gradient = "linear-gradient(135deg, #6b7280 0%, #4b5563 100%)"
                      subtitle = "No Token Usage"
                  else:
                      bg_gradient = "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
                      subtitle = "Total Tokens Used"

                  return f"""
                  <div style="
                      display: flex;
                      flex-direction: column;
                      align-items: center;
                      justify-content: center;
                      height: 100%;
                      font-family: 'Amazon Ember', -apple-system, sans-serif;
                      background: {bg_gradient};
                      border-radius: 8px;
                      padding: 10px;
                      box-sizing: border-box;
                      overflow: hidden;
                  ">
                      <div style="
                          font-size: {font_size}px;
                          font-weight: 700;
                          color: white;
                          text-shadow: 0 2px 4px rgba(0,0,0,0.2);
                          margin-bottom: 4px;
                          line-height: 1;
                      ">{formatted_tokens}</div>
                      <div style="
                          font-size: 12px;
                          color: rgba(255,255,255,0.9);
                          text-transform: uppercase;
                          letter-spacing: 0.5px;
                          font-weight: 500;
                          line-height: 1;
                      ">{subtitle}</div>
                  </div>
                  """

              except Exception as e:
                  error_msg = str(e)
                  return f"""
                  <div style="
                      display: flex;
                      align-items: center;
                      justify-content: center;
                      height: 100%;
                      background: #fef2f2;
                      border-radius: 8px;
                      padding: 10px;
                      box-sizing: border-box;
                      overflow: hidden;
                      font-family: 'Amazon Ember', -apple-system, sans-serif;
                  ">
                      <div style="text-align: center; width: 100%; overflow: hidden;">
                          <div style="color: #991b1b; font-weight: 600; margin-bottom: 4px; font-size: 14px;">Data Unavailable</div>
                          <div style="color: #7f1d1d; font-size: 10px; word-wrap: break-word; overflow: hidden; text-overflow: ellipsis; max-height: 40px;">{error_msg[:100]}</div>
                          <div style="color: #7f1d1d; font-size: 9px; margin-top: 4px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">Log: {log_group.split('/')[-1]}</div>
                      </div>
                  </div>
                  """

  OperationsCountWidget:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ClaudeCode-Widget-OperationsCount
      Runtime: python3.11
      Handler: index.lambda_handler
      Role: !GetAtt CustomWidgetRole.Arn
      Timeout: 60
      Environment:
        Variables:
          METRICS_LOG_GROUP: !Ref MetricsLogGroup
          METRICS_REGION: !Ref MetricsRegion
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          from datetime import datetime, timedelta
          import time

          def lambda_handler(event, context):
              if event.get('describe', False):
                  return {"markdown": "# API Calls\nTotal Claude API calls made in time period"}

              log_group = os.environ['METRICS_LOG_GROUP']
              region = os.environ['METRICS_REGION']

              widget_context = event.get('widgetContext', {})
              time_range = widget_context.get('timeRange', {})
              widget_size = widget_context.get('size', {})
              width = widget_size.get('width', 300)
              height = widget_size.get('height', 200)

              logs_client = boto3.client('logs', region_name=region)

              try:
                  start_time = time_range['start']
                  end_time = time_range['end']

                  query = """
                  fields @message
                  | filter @message like /claude_code.token.usage/
                  | stats count() as operations
                  """

                  response = logs_client.start_query(
                      logGroupName=log_group,
                      startTime=start_time,
                      endTime=end_time,
                      queryString=query
                  )

                  query_id = response['queryId']

                  time.sleep(1.0)
                  max_wait = 55
                  wait_interval = 0.5
                  elapsed = 0
                  check_count = 0

                  while elapsed < max_wait:
                      response = logs_client.get_query_results(queryId=query_id)
                      status = response.get('status', 'Unknown')
                      check_count += 1

                      if status == 'Scheduled':
                          wait_interval = min(wait_interval * 1.5, 3.0)
                      elif status == 'Running':
                          wait_interval = min(wait_interval * 1.1, 1.0)
                      elif status not in ['Running', 'Scheduled']:
                          break

                      time.sleep(wait_interval)
                      elapsed += wait_interval

                  operations_count = None
                  query_status = response.get('status', 'Unknown')

                  if query_status == 'Complete':
                      if response.get('results') and len(response['results']) > 0:
                          for field in response['results'][0]:
                              if field['field'] == 'operations':
                                  operations_count = int(float(field['value']))
                                  break
                      else:
                          operations_count = 0
                  elif query_status == 'Failed':
                      raise Exception(f"Query failed: {response.get('statusReason', 'Unknown reason')}")
                  elif query_status == 'Cancelled':
                      raise Exception("Query was cancelled")
                  elif query_status in ['Running', 'Scheduled']:
                      raise Exception(f"Query timed out: {query_status}")
                  else:
                      raise Exception(f"Query status: {query_status}")

                  if operations_count is None:
                      formatted_ops = "N/A"
                  elif operations_count >= 1000:
                      formatted_ops = f"{operations_count/1000:.1f}K"
                  else:
                      formatted_ops = str(operations_count)

                  font_size = min(width // 10, height // 5, 48)

                  if operations_count == 0:
                      bg_gradient = "linear-gradient(135deg, #6b7280 0%, #4b5563 100%)"
                      subtitle = "No API Calls"
                  else:
                      bg_gradient = "linear-gradient(135deg, #10b981 0%, #059669 100%)"
                      subtitle = "API Calls"

                  return f"""
                  <div style="
                      display: flex;
                      flex-direction: column;
                      align-items: center;
                      justify-content: center;
                      height: 100%;
                      font-family: 'Amazon Ember', -apple-system, sans-serif;
                      background: {bg_gradient};
                      border-radius: 8px;
                      padding: 10px;
                      box-sizing: border-box;
                      overflow: hidden;
                  ">
                      <div style="
                          font-size: {font_size}px;
                          font-weight: 700;
                          color: white;
                          text-shadow: 0 2px 4px rgba(0,0,0,0.2);
                          margin-bottom: 4px;
                          line-height: 1;
                      ">{formatted_ops}</div>
                      <div style="
                          font-size: 12px;
                          color: rgba(255,255,255,0.9);
                          text-transform: uppercase;
                          letter-spacing: 0.5px;
                          font-weight: 500;
                          line-height: 1;
                      ">{subtitle}</div>
                  </div>
                  """

              except Exception as e:
                  error_msg = str(e)
                  return f"""
                  <div style="
                      display: flex;
                      align-items: center;
                      justify-content: center;
                      height: 100%;
                      background: #fef2f2;
                      border-radius: 8px;
                      padding: 10px;
                      box-sizing: border-box;
                      overflow: hidden;
                      font-family: 'Amazon Ember', -apple-system, sans-serif;
                  ">
                      <div style="text-align: center; width: 100%; overflow: hidden;">
                          <div style="color: #991b1b; font-weight: 600; margin-bottom: 4px; font-size: 14px;">Data Unavailable</div>
                          <div style="color: #7f1d1d; font-size: 10px; word-wrap: break-word; overflow: hidden; text-overflow: ellipsis; max-height: 40px;">{error_msg[:100]}</div>
                          <div style="color: #7f1d1d; font-size: 9px; margin-top: 4px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">Log: {log_group.split('/')[-1]}</div>
                      </div>
                  </div>
                  """

  ActiveUsersWidget:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ClaudeCode-Widget-ActiveUsers
      Runtime: python3.11
      Handler: index.lambda_handler
      Role: !GetAtt CustomWidgetRole.Arn
      Timeout: 60
      Environment:
        Variables:
          METRICS_LOG_GROUP: !Ref MetricsLogGroup
          METRICS_REGION: !Ref MetricsRegion
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          from datetime import datetime, timedelta
          import time

          def lambda_handler(event, context):
              if event.get('describe', False):
                  return {"markdown": "# Active Users\nNumber of unique users in time period"}

              log_group = os.environ['METRICS_LOG_GROUP']
              region = os.environ['METRICS_REGION']

              widget_context = event.get('widgetContext', {})
              time_range = widget_context.get('timeRange', {})
              widget_size = widget_context.get('size', {})
              width = widget_size.get('width', 300)
              height = widget_size.get('height', 200)

              logs_client = boto3.client('logs', region_name=region)

              try:
                  if 'start' in time_range and 'end' in time_range:
                      start_time = time_range['start']
                      end_time = time_range['end']
                  else:
                      end_time = int(datetime.now().timestamp() * 1000)
                      start_time = int((datetime.now() - timedelta(days=1)).timestamp() * 1000)

                  query = """
                  fields @message
                  | filter @message like /user.email/
                  | parse @message /"user.email":"(?<user>[^"]*)"/
                  | stats count_distinct(user) as active_users
                  """

                  response = logs_client.start_query(
                      logGroupName=log_group,
                      startTime=start_time,
                      endTime=end_time,
                      queryString=query
                  )

                  query_id = response['queryId']

                  max_wait = 55
                  wait_interval = 0.5
                  elapsed = 0
                  check_count = 0

                  while elapsed < max_wait:
                      response = logs_client.get_query_results(queryId=query_id)
                      status = response.get('status', 'Unknown')
                      check_count += 1
                      if status == 'Scheduled':
                          wait_interval = min(wait_interval * 1.5, 3.0)
                      elif status == 'Running':
                          wait_interval = min(wait_interval * 1.1, 1.0)
                      elif status in ['Complete', 'Failed', 'Cancelled']:
                          break

                      time.sleep(wait_interval)
                      elapsed += wait_interval

                  user_count = None
                  query_status = response.get('status', 'Unknown')

                  if query_status == 'Complete':
                      if response.get('results') and len(response['results']) > 0:
                          for field in response['results'][0]:
                              if field['field'] == 'active_users':
                                  user_count = int(float(field['value']))
                                  break
                      else:
                          user_count = 0
                  elif query_status == 'Failed':
                      raise Exception(f"Query failed: {response.get('statusReason', 'Unknown reason')}")
                  elif query_status == 'Cancelled':
                      raise Exception("Query was cancelled")
                  else:
                      raise Exception(f"Query did not complete: {query_status}")

                  if user_count is None:
                      formatted_users = "N/A"
                  else:
                      formatted_users = str(user_count)

                  font_size = min(width // 10, height // 5, 48)

                  if user_count == 0:
                      bg_gradient = "linear-gradient(135deg, #6b7280 0%, #4b5563 100%)"
                      subtitle = "No Active Users"
                  else:
                      bg_gradient = "linear-gradient(135deg, #f59e0b 0%, #d97706 100%)"
                      subtitle = "Active Users"

                  return f"""
                  <div style="
                      display: flex;
                      flex-direction: column;
                      align-items: center;
                      justify-content: center;
                      height: 100%;
                      font-family: 'Amazon Ember', -apple-system, sans-serif;
                      background: {bg_gradient};
                      border-radius: 8px;
                      padding: 10px;
                      box-sizing: border-box;
                      overflow: hidden;
                  ">
                      <div style="
                          font-size: {font_size}px;
                          font-weight: 700;
                          color: white;
                          text-shadow: 0 2px 4px rgba(0,0,0,0.2);
                          margin-bottom: 4px;
                          line-height: 1;
                      ">{formatted_users}</div>
                      <div style="
                          font-size: 12px;
                          color: rgba(255,255,255,0.9);
                          text-transform: uppercase;
                          letter-spacing: 0.5px;
                          font-weight: 500;
                          line-height: 1;
                      ">{subtitle}</div>
                  </div>
                  """

              except Exception as e:
                  error_msg = str(e)
                  return f"""
                  <div style="
                      display: flex;
                      align-items: center;
                      justify-content: center;
                      height: 100%;
                      background: #fef2f2;
                      border-radius: 8px;
                      padding: 10px;
                      box-sizing: border-box;
                      overflow: hidden;
                      font-family: 'Amazon Ember', -apple-system, sans-serif;
                  ">
                      <div style="text-align: center; width: 100%; overflow: hidden;">
                          <div style="color: #991b1b; font-weight: 600; margin-bottom: 4px; font-size: 14px;">Data Unavailable</div>
                          <div style="color: #7f1d1d; font-size: 10px; word-wrap: break-word; overflow: hidden; text-overflow: ellipsis; max-height: 40px;">{error_msg[:100]}</div>
                          <div style="color: #7f1d1d; font-size: 9px; margin-top: 4px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">Log: {log_group.split('/')[-1]}</div>
                      </div>
                  </div>
                  """

  TokenByModelWidget:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ClaudeCode-Widget-TokenByModel
      Runtime: python3.11
      Handler: index.lambda_handler
      Role: !GetAtt CustomWidgetRole.Arn
      Timeout: 60
      Environment:
        Variables:
          METRICS_LOG_GROUP: !Ref MetricsLogGroup
          METRICS_REGION: !Ref MetricsRegion
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          from datetime import datetime, timedelta
          import time
          import math
          from urllib.parse import quote

          def lambda_handler(event, context):
              if event.get('describe', False):
                  return {"markdown": "# Token Usage by Model\nPie chart showing token distribution"}

              log_group = os.environ['METRICS_LOG_GROUP']
              region = os.environ['METRICS_REGION']

              widget_context = event.get('widgetContext', {})
              time_range = widget_context.get('timeRange', {})

              logs_client = boto3.client('logs', region_name=region)

              try:
                  if 'start' in time_range and 'end' in time_range:
                      start_time = time_range['start']
                      end_time = time_range['end']
                  else:
                      end_time = int(datetime.now().timestamp() * 1000)
                      start_time = int((datetime.now() - timedelta(days=7)).timestamp() * 1000)

                  query = """
                  fields @message
                  | filter @message like /claude_code.token.usage/
                  | parse @message /"model":"(?<model>[^"]*)"/
                  | parse @message /"claude_code.token.usage":(?<tokens>[0-9.]+)/
                  | stats sum(tokens) as total by model
                  | sort total desc
                  """

                  response = logs_client.start_query(
                      logGroupName=log_group,
                      startTime=start_time,
                      endTime=end_time,
                      queryString=query
                  )

                  query_id = response['queryId']
                  max_wait = 55
                  wait_interval = 0.5
                  elapsed = 0
                  check_count = 0

                  while elapsed < max_wait:
                      response = logs_client.get_query_results(queryId=query_id)
                      status = response.get('status', 'Unknown')
                      check_count += 1
                      if status == 'Scheduled':
                          wait_interval = min(wait_interval * 1.5, 3.0)
                      elif status == 'Running':
                          wait_interval = min(wait_interval * 1.1, 1.0)
                      elif status in ['Complete', 'Failed', 'Cancelled']:
                          break

                      time.sleep(wait_interval)
                      elapsed += wait_interval

                  query_status = response.get('status', 'Unknown')
                  model_aggregates = {}

                  if query_status == 'Complete':
                      if response.get('results') and len(response['results']) > 0:
                          for result in response['results']:
                              model_raw = ''
                              total = 0
                              for field in result:
                                  if field['field'] == 'model':
                                      model_raw = field['value']
                                  elif field['field'] == 'total':
                                      total = float(field['value'])

                              if model_raw and total:
                                  model_name = model_raw.replace('us.anthropic.', '').replace('anthropic.', '')
                                  if 'opus-4-1' in model_name.lower():
                                      model_family = 'Opus 4.1'
                                  elif 'opus-4' in model_name.lower():
                                      model_family = 'Opus 4'
                                  elif 'sonnet-3.7' in model_name.lower() or 'sonnet-3-7' in model_name.lower():
                                      model_family = 'Sonnet 3.7'
                                  elif 'sonnet-3.5' in model_name.lower() or 'sonnet-3-5' in model_name.lower():
                                      model_family = 'Sonnet 3.5'
                                  elif 'haiku-3.5' in model_name.lower() or 'haiku-3-5' in model_name.lower():
                                      model_family = 'Haiku 3.5'
                                  elif 'opus' in model_name.lower():
                                      model_family = 'Opus'
                                  elif 'sonnet' in model_name.lower():
                                      model_family = 'Sonnet'
                                  elif 'haiku' in model_name.lower():
                                      model_family = 'Haiku'
                                  else:
                                      model_family = model_name.split('-')[2] if len(model_name.split('-')) > 2 else model_name

                                  if model_family in model_aggregates:
                                      model_aggregates[model_family] += total
                                  else:
                                      model_aggregates[model_family] = total
                      else:
                          pass
                  elif query_status == 'Failed':
                      raise Exception(f"Query failed: {response.get('statusReason', 'Unknown reason')}")
                  elif query_status == 'Cancelled':
                      raise Exception("Query was cancelled")
                  else:
                      raise Exception(f"Query did not complete: {query_status}")

                  data = []
                  colors = ['#667eea', '#764ba2', '#f59e0b', '#10b981', '#ef4444', '#06b6d4', '#ec4899', '#8b5cf6', '#f97316', '#14b8a6']

                  sorted_models = sorted(model_aggregates.items(), key=lambda x: x[1], reverse=True)
                  for i, (model, total) in enumerate(sorted_models):
                      data.append({
                          'label': model,
                          'value': total,
                          'color': colors[i % len(colors)]
                      })

                  total_sum = sum(d['value'] for d in data)
                  for d in data:
                      d['percentage'] = (d['value'] / total_sum * 100) if total_sum > 0 else 0

                  pie_html = ''
                  cumulative = 0
                  for d in data:
                      pie_html += f'''
                      <div style="
                          display: flex;
                          align-items: center;
                          margin: 8px 0;
                      ">
                          <div style="
                              width: 16px;
                              height: 16px;
                              background: {d['color']};
                              border-radius: 3px;
                              margin-right: 12px;
                          "></div>
                          <div style="flex: 1; font-weight: 500;">{d['label']}</div>
                          <div style="font-weight: 600;">{d['percentage']:.1f}%</div>
                      </div>
                      '''

                  logs_url = f"https://console.aws.amazon.com/cloudwatch/home?region={region}#logsV2:logs-insights"

                  if not data:
                      return f'''
                      <div style="
                          display: flex;
                          flex-direction: column;
                          align-items: center;
                          justify-content: center;
                          height: 100%;
                          font-family: 'Amazon Ember', -apple-system, sans-serif;
                          background: linear-gradient(135deg, #6b7280 0%, #4b5563 100%);
                          border-radius: 8px;
                          padding: 10px;
                          box-sizing: border-box;
                          overflow: hidden;
                      ">
                          <div style="
                              font-size: 16px;
                              font-weight: 600;
                              color: white;
                              text-shadow: 0 2px 4px rgba(0,0,0,0.2);
                          ">No Model Data</div>
                          <div style="
                              font-size: 11px;
                              color: rgba(255,255,255,0.8);
                              margin-top: 8px;
                          ">No token usage data available</div>
                      </div>
                      '''

                  return f'''
                  <div style="
                      padding: 10px;
                      height: 100%;
                      font-family: 'Amazon Ember', -apple-system, sans-serif;
                      background: white;
                      border-radius: 8px;
                      box-sizing: border-box;
                      overflow: hidden;
                  ">
                      <div style="font-size: 14px; font-weight: 600; margin-bottom: 10px;">Token Usage by Model</div>
                      {pie_html}
                  </div>
                  '''

              except Exception as e:
                  error_msg = str(e)
                  return f"""
                  <div style="
                      display: flex;
                      align-items: center;
                      justify-content: center;
                      height: 100%;
                      background: #fef2f2;
                      border-radius: 8px;
                      padding: 10px;
                      box-sizing: border-box;
                      overflow: hidden;
                      font-family: 'Amazon Ember', -apple-system, sans-serif;
                  ">
                      <div style="text-align: center; width: 100%; overflow: hidden;">
                          <div style="color: #991b1b; font-weight: 600; margin-bottom: 4px; font-size: 14px;">Data Unavailable</div>
                          <div style="color: #7f1d1d; font-size: 10px; word-wrap: break-word; overflow: hidden; text-overflow: ellipsis; max-height: 40px;">{error_msg[:100]}</div>
                          <div style="color: #7f1d1d; font-size: 9px; margin-top: 4px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">Log: {log_group.split('/')[-1]}</div>
                      </div>
                  </div>
                  """

  CacheEfficiencyWidget:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ClaudeCode-Widget-CacheEfficiency
      Runtime: python3.11
      Handler: index.lambda_handler
      Role: !GetAtt CustomWidgetRole.Arn
      Timeout: 60
      Environment:
        Variables:
          METRICS_LOG_GROUP: !Ref MetricsLogGroup
          METRICS_REGION: !Ref MetricsRegion
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          from datetime import datetime, timedelta
          import time

          def lambda_handler(event, context):
              if event.get('describe', False):
                  return {"markdown": "# Cache Efficiency\nCache hit rate percentage"}

              log_group = os.environ['METRICS_LOG_GROUP']
              region = os.environ['METRICS_REGION']

              widget_context = event.get('widgetContext', {})
              time_range = widget_context.get('timeRange', {})
              widget_size = widget_context.get('size', {})
              width = widget_size.get('width', 300)
              height = widget_size.get('height', 200)

              logs_client = boto3.client('logs', region_name=region)

              try:
                  if 'start' in time_range and 'end' in time_range:
                      start_time = time_range['start']
                      end_time = time_range['end']
                  else:
                      end_time = int(datetime.now().timestamp() * 1000)
                      start_time = int((datetime.now() - timedelta(hours=1)).timestamp() * 1000)

                  query = """
                  fields @message
                  | filter @message like /claude_code.token.usage/
                  | parse @message /"type":"(?<cache_type>[^"]*)"/
                  | filter cache_type in ["cacheRead", "cacheCreation"]
                  | parse @message /"claude_code.token.usage":(?<tokens>[0-9.]+)/
                  | stats sum(tokens) as total by cache_type
                  """

                  response = logs_client.start_query(
                      logGroupName=log_group,
                      startTime=start_time,
                      endTime=end_time,
                      queryString=query
                  )

                  query_id = response['queryId']

                  time.sleep(1.0)  # Initial delay for scheduling

                  max_wait = 55
                  wait_interval = 0.5
                  elapsed = 0
                  check_count = 0

                  while elapsed < max_wait:
                      response = logs_client.get_query_results(queryId=query_id)
                      status = response.get('status', 'Unknown')
                      check_count += 1
                      if status == 'Scheduled':
                          wait_interval = min(wait_interval * 1.5, 3.0)
                      elif status == 'Running':
                          wait_interval = min(wait_interval * 1.1, 1.0)
                      elif status in ['Complete', 'Failed', 'Cancelled']:
                          break

                      time.sleep(wait_interval)
                      elapsed += wait_interval

                  query_status = response.get('status', 'Unknown')
                  cache_reads = 0
                  cache_creations = 0

                  if query_status == 'Complete':
                      if response.get('results') and len(response['results']) > 0:
                          for result in response['results']:
                              cache_type = ''
                              total = 0
                              for field in result:
                                  if field['field'] == 'cache_type':
                                      cache_type = field['value']
                                  elif field['field'] == 'total':
                                      total = float(field['value'])

                              if cache_type == 'cacheRead':
                                  cache_reads = total
                              elif cache_type == 'cacheCreation':
                                  cache_creations = total
                      else:
                          pass
                  elif query_status == 'Failed':
                      raise Exception(f"Query failed: {response.get('statusReason', 'Unknown reason')}")
                  elif query_status == 'Cancelled':
                      raise Exception("Query was cancelled")
                  elif query_status in ['Running', 'Scheduled']:
                      raise Exception(f"Query timed out: {query_status}")
                  else:
                      raise Exception(f"Query status: {query_status}")

                  total = cache_reads + cache_creations
                  efficiency = (cache_reads / total * 100) if total > 0 else None

                  font_size = min(width // 10, height // 5, 48)

                  if efficiency is None or total == 0:
                      return f'''
                      <div style="
                          display: flex;
                          flex-direction: column;
                          align-items: center;
                          justify-content: center;
                          height: 100%;
                          font-family: 'Amazon Ember', -apple-system, sans-serif;
                          background: linear-gradient(135deg, #6b7280 0%, #4b5563 100%);
                          border-radius: 8px;
                          padding: 10px;
                          box-sizing: border-box;
                          overflow: hidden;
                      ">
                          <div style="
                              font-size: {font_size}px;
                              font-weight: 700;
                              color: white;
                              text-shadow: 0 2px 4px rgba(0,0,0,0.2);
                              margin-bottom: 4px;
                              line-height: 1;
                          ">N/A</div>
                          <div style="
                              font-size: 12px;
                              color: rgba(255,255,255,0.9);
                              text-transform: uppercase;
                              letter-spacing: 0.5px;
                              font-weight: 500;
                              line-height: 1;
                          ">No Cache Data</div>
                      </div>
                      '''

                  if efficiency >= 70:
                      color = '#10b981'  # Green
                      status = '●'
                  elif efficiency >= 50:
                      color = '#f59e0b'  # Yellow
                      status = '◐'
                  else:
                      color = '#ef4444'  # Red
                      status = '○'

                  return f'''
                  <div style="
                      display: flex;
                      flex-direction: column;
                      align-items: center;
                      justify-content: center;
                      height: 100%;
                      font-family: 'Amazon Ember', -apple-system, sans-serif;
                      background: linear-gradient(135deg, {color} 0%, {color}aa 100%);
                      border-radius: 8px;
                      padding: 10px;
                      box-sizing: border-box;
                      overflow: hidden;
                  ">
                      <div style="
                          font-size: {font_size}px;
                          font-weight: 700;
                          color: white;
                          text-shadow: 0 2px 4px rgba(0,0,0,0.2);
                          margin-bottom: 4px;
                          line-height: 1;
                      ">{efficiency:.0f}% {status}</div>
                      <div style="
                          font-size: 12px;
                          color: rgba(255,255,255,0.9);
                          text-transform: uppercase;
                          letter-spacing: 0.5px;
                          font-weight: 500;
                          line-height: 1;
                      ">Cache Efficiency</div>
                      <div style="
                          margin-top: 8px;
                          font-size: 10px;
                          color: rgba(255,255,255,0.8);
                          line-height: 1;
                      ">{int(cache_reads):,} cached / {int(total):,} tokens</div>
                  </div>
                  '''

              except Exception as e:
                  error_msg = str(e)
                  return f"""
                  <div style="
                      display: flex;
                      align-items: center;
                      justify-content: center;
                      height: 100%;
                      background: #fef2f2;
                      border-radius: 8px;
                      padding: 10px;
                      box-sizing: border-box;
                      overflow: hidden;
                      font-family: 'Amazon Ember', -apple-system, sans-serif;
                  ">
                      <div style="text-align: center; width: 100%; overflow: hidden;">
                          <div style="color: #991b1b; font-weight: 600; margin-bottom: 4px; font-size: 14px;">Data Unavailable</div>
                          <div style="color: #7f1d1d; font-size: 10px; word-wrap: break-word; overflow: hidden; text-overflow: ellipsis; max-height: 40px;">{error_msg[:100]}</div>
                          <div style="color: #7f1d1d; font-size: 9px; margin-top: 4px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">Log: {log_group.split('/')[-1]}</div>
                      </div>
                  </div>
                  """

Outputs:
  TotalTokensWidgetArn:
    Description: ARN for Total Tokens custom widget
    Value: !GetAtt TotalTokensWidget.Arn
    Export:
      Name: !Sub '${AWS::StackName}-TotalTokensArn'

  OperationsCountWidgetArn:
    Description: ARN for Operations Count custom widget
    Value: !GetAtt OperationsCountWidget.Arn
    Export:
      Name: !Sub '${AWS::StackName}-OperationsCountArn'

  ActiveUsersWidgetArn:
    Description: ARN for Active Users custom widget
    Value: !GetAtt ActiveUsersWidget.Arn
    Export:
      Name: !Sub '${AWS::StackName}-ActiveUsersArn'

  TokenByModelWidgetArn:
    Description: ARN for Token by Model pie chart widget
    Value: !GetAtt TokenByModelWidget.Arn
    Export:
      Name: !Sub '${AWS::StackName}-TokenByModelArn'

  CacheEfficiencyWidgetArn:
    Description: ARN for Cache Efficiency widget
    Value: !GetAtt CacheEfficiencyWidget.Arn
    Export:
      Name: !Sub '${AWS::StackName}-CacheEfficiencyArn'

  StackName:
    Description: Name of this stack for referencing in dashboard template
    Value: !Ref AWS::StackName
    Export:
      Name: !Sub '${AWS::StackName}-Name'
